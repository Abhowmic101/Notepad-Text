to center an element margin property with value auto is enough don't
need to set value to 0px

 function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:
Each red, green, and blue value is a number from 0 to 255
. 0 means that there's 0% of that color, and is black. 
255 means that there's 100% of that color.

the Lower rgb value the darker the color is

In the additive RGB color model, primary colors are colors that, when combined, create pure white. But for this to happen, each color needs to be at its highest intensity.
Secondary colors are the colors you get when you combine primary colors. You might have noticed some secondary colors in the last step as you changed the red, green, and blue values.

To create the next secondary color, cyan, update the rgb function in the .two CSS rule to combine pure green and pure blue.

Now that you're familiar with secondary colors, you'll learn how to create tertiary colors. Tertiary colors are created by combining a primary with a nearby secondary color.
A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange.

Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.

In the rgb function for the .one CSS rule, set the red 
value to the max of 255 to produce pure red. In the rgb
function for .two CSS rule, set the values for green and
blue to the max of 255 to produce cyan.



It's better practice to choose one color as the dominant
color, and use its complementary color as an accent to
bring attention to certain content on the page.


Hex color values start with a # character and take six 
characters from 0-9 and A-F. The first pair of characters
represent red, the second pair represent green, and the
third pair represent blue. For example, #4B5320.


You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:

0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%.
So #00FF00 translates to 0% red, 100% green, and 0% blue,
and is the same as green.

For the green marker's box-shadow property, replace the 
named color with a hex color code. Use the values 3B for
red, 7E for green, 20 for blue, and CC for the alpha 
channel.

The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.

If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 
degrees.Hue is a degree on the color wheel from 0 to 360.

Saturation is the intensity of a color from 0%, or gray, to 100% for pure color.

Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.

In the .blue CSS rule, use the hsl function to change the
background-color property to pure blue. Set the hue to 240,
the saturation to 100%, and the lightness to 50%.

a color transition, or gradient, on an element.

A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.

One thing to remember is that the linear-gradient function 
actually creates an image element, and is usually paired
with the background property which can accept an image as
a value.

Gradient:
The linear-gradient function is very flexible -- here is 
the basic syntax you'll use in this tutorial:

linear-gradient(gradientDirection, color1, color2, ...);

gradientDirection is the direction of the line used for 
the transition. color1 and color2 are color arguments, 
which are the colors that will be used in the transition
itself. These can be any type of color, including color 
keywords, hex, rgb, or hsl.

The linear-gradient function automatically calculates 
these values, and places colors evenly along the gradient
line by default even if you don't set a color stop value.

If no gradientDirection argument is provided to the 
linear-gradient function, it arranges colors from top to
bottom, or along a 180 degree line, by default.

Opacity describes how opaque, or non-transparent, 
something is. For example, a solid wall is opaque, and no
light can pass through. But a drinking glass is much more
transparent, and you can see through the glass to the 
other side.

The rgba function works just like the rgb function, 
but takes one more number from 0 to 1.0 for the alpha 
channel:

rgba(redValue, greenValue, blueValue, alphaValue);

Shadow-property:
The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:

box-shadow: offsetX offsetY color;

As you can see, you added a simple red shadow around your
marker that's 5 pixels to the right, and 5 pixels down.

Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:

box-shadow: offsetX offsetY blurRadius color;
If a blurRadius value isn't included, it defaults to 0 and
produces sharp edges. The higher the value of blurRadius,
the greater the blurring effect is.

But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:

box-shadow: offsetX offsetY blurRadius spreadRadius color;

Like blurRadius, spreadRadius defaults to 0 if it isn't included.

But what if you wanted to position your shadow on the opposite
side? You can do that by using negative values for offset
X and offsetY.

